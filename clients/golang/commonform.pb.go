// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.7.1
// source: commonform.proto

package commonform_grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Document_DocumentMeta_InputFormat int32

const (
	Document_DocumentMeta_commonmark Document_DocumentMeta_InputFormat = 0
	Document_DocumentMeta_json       Document_DocumentMeta_InputFormat = 1
	Document_DocumentMeta_markup     Document_DocumentMeta_InputFormat = 2
)

// Enum value maps for Document_DocumentMeta_InputFormat.
var (
	Document_DocumentMeta_InputFormat_name = map[int32]string{
		0: "commonmark",
		1: "json",
		2: "markup",
	}
	Document_DocumentMeta_InputFormat_value = map[string]int32{
		"commonmark": 0,
		"json":       1,
		"markup":     2,
	}
)

func (x Document_DocumentMeta_InputFormat) Enum() *Document_DocumentMeta_InputFormat {
	p := new(Document_DocumentMeta_InputFormat)
	*p = x
	return p
}

func (x Document_DocumentMeta_InputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Document_DocumentMeta_InputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_commonform_proto_enumTypes[0].Descriptor()
}

func (Document_DocumentMeta_InputFormat) Type() protoreflect.EnumType {
	return &file_commonform_proto_enumTypes[0]
}

func (x Document_DocumentMeta_InputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Document_DocumentMeta_InputFormat.Descriptor instead.
func (Document_DocumentMeta_InputFormat) EnumDescriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{0, 0, 0}
}

// we use an enum both for type safety as well as to
// signal what has been implemented in the server.
type ToAssemble_OutputFormat int32

const (
	ToAssemble_docx     ToAssemble_OutputFormat = 0
	ToAssemble_html     ToAssemble_OutputFormat = 1
	ToAssemble_html5    ToAssemble_OutputFormat = 2
	ToAssemble_markdown ToAssemble_OutputFormat = 3
)

// Enum value maps for ToAssemble_OutputFormat.
var (
	ToAssemble_OutputFormat_name = map[int32]string{
		0: "docx",
		1: "html",
		2: "html5",
		3: "markdown",
	}
	ToAssemble_OutputFormat_value = map[string]int32{
		"docx":     0,
		"html":     1,
		"html5":    2,
		"markdown": 3,
	}
)

func (x ToAssemble_OutputFormat) Enum() *ToAssemble_OutputFormat {
	p := new(ToAssemble_OutputFormat)
	*p = x
	return p
}

func (x ToAssemble_OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToAssemble_OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_commonform_proto_enumTypes[1].Descriptor()
}

func (ToAssemble_OutputFormat) Type() protoreflect.EnumType {
	return &file_commonform_proto_enumTypes[1]
}

func (x ToAssemble_OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToAssemble_OutputFormat.Descriptor instead.
func (ToAssemble_OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2, 0}
}

// the below are options but we should be largely
// opinionated for most uses.
type ToAssemble_NumberFormat int32

const (
	ToAssemble_decimal ToAssemble_NumberFormat = 0
	ToAssemble_outline ToAssemble_NumberFormat = 1
)

// Enum value maps for ToAssemble_NumberFormat.
var (
	ToAssemble_NumberFormat_name = map[int32]string{
		0: "decimal",
		1: "outline",
	}
	ToAssemble_NumberFormat_value = map[string]int32{
		"decimal": 0,
		"outline": 1,
	}
)

func (x ToAssemble_NumberFormat) Enum() *ToAssemble_NumberFormat {
	p := new(ToAssemble_NumberFormat)
	*p = x
	return p
}

func (x ToAssemble_NumberFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToAssemble_NumberFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_commonform_proto_enumTypes[2].Descriptor()
}

func (ToAssemble_NumberFormat) Type() protoreflect.EnumType {
	return &file_commonform_proto_enumTypes[2]
}

func (x ToAssemble_NumberFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToAssemble_NumberFormat.Descriptor instead.
func (ToAssemble_NumberFormat) EnumDescriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2, 1}
}

// The Document message is a fairly straight-forward and
// object which includes a modicum of meta data which is needed
// both by the cf-server as well as clients of this server
// along with a filename and the contents of the file as a
// byte slice (golang) or a bytes buffer (node).
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Document_DocumentMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetMeta() *Document_DocumentMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Document) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// The Blanks message is a simple wrapper around an array of
// strings since we cannot return arrays.
type Blanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blanks []string `protobuf:"bytes,1,rep,name=blanks,proto3" json:"blanks,omitempty"`
}

func (x *Blanks) Reset() {
	*x = Blanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blanks) ProtoMessage() {}

func (x *Blanks) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blanks.ProtoReflect.Descriptor instead.
func (*Blanks) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{1}
}

func (x *Blanks) GetBlanks() []string {
	if x != nil {
		return x.Blanks
	}
	return nil
}

// The ToAssemble message is fairly complex due to the structure
// of the information which commonform expects us to send it.
//
// Many of the nobs that can be turned within the commonform server
// have reasonable defaults given BOTH within the server/engine
// itself and within the ToAssemble message. As such, many of the
// below feilds are optional (or repeated, which assumes optional
// in protobuf parlance).
type ToAssemble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document   *Document               `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Title      string                  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Blanks     []*ToAssemble_Blank     `protobuf:"bytes,3,rep,name=blanks,proto3" json:"blanks,omitempty"`
	Signatures []*ToAssemble_Signature `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// really the below should be a formalized object,
	// but protobuf cannot cope with the mixed output
	// it would require since it is really a
	// map<string, (string|bool)> . as such, until
	// we systematize the sytles object or protobuf
	// changes it's type guarantees we just send the
	// json bytes in and allow the server to Marshal
	// them into a json object the server can read.
	Styles                 []byte                  `protobuf:"bytes,5,opt,name=styles,proto3" json:"styles,omitempty"`
	Format                 ToAssemble_OutputFormat `protobuf:"varint,6,opt,name=format,proto3,enum=commonform.ToAssemble_OutputFormat" json:"format,omitempty"`
	Numbering              ToAssemble_NumberFormat `protobuf:"varint,7,opt,name=numbering,proto3,enum=commonform.ToAssemble_NumberFormat" json:"numbering,omitempty"`
	Hash                   bool                    `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	IndentMargins          bool                    `protobuf:"varint,9,opt,name=indentMargins,proto3" json:"indentMargins,omitempty"`
	LeftAlignTitle         bool                    `protobuf:"varint,10,opt,name=leftAlignTitle,proto3" json:"leftAlignTitle,omitempty"`
	MarkFilled             bool                    `protobuf:"varint,11,opt,name=markFilled,proto3" json:"markFilled,omitempty"`
	UnfilledBlanks         string                  `protobuf:"bytes,12,opt,name=unfilledBlanks,proto3" json:"unfilledBlanks,omitempty"`
	UseExternalSignatures  bool                    `protobuf:"varint,13,opt,name=useExternalSignatures,proto3" json:"useExternalSignatures,omitempty"`
	ExternalSignatureCount uint64                  `protobuf:"varint,14,opt,name=externalSignatureCount,proto3" json:"externalSignatureCount,omitempty"`
}

func (x *ToAssemble) Reset() {
	*x = ToAssemble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAssemble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAssemble) ProtoMessage() {}

func (x *ToAssemble) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAssemble.ProtoReflect.Descriptor instead.
func (*ToAssemble) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2}
}

func (x *ToAssemble) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ToAssemble) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ToAssemble) GetBlanks() []*ToAssemble_Blank {
	if x != nil {
		return x.Blanks
	}
	return nil
}

func (x *ToAssemble) GetSignatures() []*ToAssemble_Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *ToAssemble) GetStyles() []byte {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *ToAssemble) GetFormat() ToAssemble_OutputFormat {
	if x != nil {
		return x.Format
	}
	return ToAssemble_docx
}

func (x *ToAssemble) GetNumbering() ToAssemble_NumberFormat {
	if x != nil {
		return x.Numbering
	}
	return ToAssemble_decimal
}

func (x *ToAssemble) GetHash() bool {
	if x != nil {
		return x.Hash
	}
	return false
}

func (x *ToAssemble) GetIndentMargins() bool {
	if x != nil {
		return x.IndentMargins
	}
	return false
}

func (x *ToAssemble) GetLeftAlignTitle() bool {
	if x != nil {
		return x.LeftAlignTitle
	}
	return false
}

func (x *ToAssemble) GetMarkFilled() bool {
	if x != nil {
		return x.MarkFilled
	}
	return false
}

func (x *ToAssemble) GetUnfilledBlanks() string {
	if x != nil {
		return x.UnfilledBlanks
	}
	return ""
}

func (x *ToAssemble) GetUseExternalSignatures() bool {
	if x != nil {
		return x.UseExternalSignatures
	}
	return false
}

func (x *ToAssemble) GetExternalSignatureCount() uint64 {
	if x != nil {
		return x.ExternalSignatureCount
	}
	return 0
}

type Document_DocumentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mime   string                            `protobuf:"bytes,2,opt,name=mime,proto3" json:"mime,omitempty"`
	Format Document_DocumentMeta_InputFormat `protobuf:"varint,3,opt,name=format,proto3,enum=commonform.Document_DocumentMeta_InputFormat" json:"format,omitempty"`
}

func (x *Document_DocumentMeta) Reset() {
	*x = Document_DocumentMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document_DocumentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document_DocumentMeta) ProtoMessage() {}

func (x *Document_DocumentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document_DocumentMeta.ProtoReflect.Descriptor instead.
func (*Document_DocumentMeta) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Document_DocumentMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Document_DocumentMeta) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *Document_DocumentMeta) GetFormat() Document_DocumentMeta_InputFormat {
	if x != nil {
		return x.Format
	}
	return Document_DocumentMeta_commonmark
}

// we use a formalized object to enhance type safety
type ToAssemble_Blank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ToAssemble_Blank) Reset() {
	*x = ToAssemble_Blank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAssemble_Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAssemble_Blank) ProtoMessage() {}

func (x *ToAssemble_Blank) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAssemble_Blank.ProtoReflect.Descriptor instead.
func (*ToAssemble_Blank) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ToAssemble_Blank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToAssemble_Blank) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// we use a formalized object to enhance type safety
type ToAssemble_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term        string                         `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Name        string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Header      string                         `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Information []string                       `protobuf:"bytes,4,rep,name=information,proto3" json:"information,omitempty"`
	SamePage    bool                           `protobuf:"varint,5,opt,name=samePage,proto3" json:"samePage,omitempty"`
	Entities    []*ToAssemble_Signature_Entity `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ToAssemble_Signature) Reset() {
	*x = ToAssemble_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAssemble_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAssemble_Signature) ProtoMessage() {}

func (x *ToAssemble_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAssemble_Signature.ProtoReflect.Descriptor instead.
func (*ToAssemble_Signature) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ToAssemble_Signature) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ToAssemble_Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToAssemble_Signature) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ToAssemble_Signature) GetInformation() []string {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *ToAssemble_Signature) GetSamePage() bool {
	if x != nil {
		return x.SamePage
	}
	return false
}

func (x *ToAssemble_Signature) GetEntities() []*ToAssemble_Signature_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ToAssemble_Signature_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Form         string `protobuf:"bytes,2,opt,name=form,proto3" json:"form,omitempty"`
	Jurisdiction string `protobuf:"bytes,3,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	By           string `protobuf:"bytes,4,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *ToAssemble_Signature_Entity) Reset() {
	*x = ToAssemble_Signature_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAssemble_Signature_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAssemble_Signature_Entity) ProtoMessage() {}

func (x *ToAssemble_Signature_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_commonform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAssemble_Signature_Entity.ProtoReflect.Descriptor instead.
func (*ToAssemble_Signature_Entity) Descriptor() ([]byte, []int) {
	return file_commonform_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *ToAssemble_Signature_Entity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToAssemble_Signature_Entity) GetForm() string {
	if x != nil {
		return x.Form
	}
	return ""
}

func (x *ToAssemble_Signature_Entity) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *ToAssemble_Signature_Entity) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

var File_commonform_proto protoreflect.FileDescriptor

var file_commonform_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x8a,
	0x02, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb2, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x33, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x61, 0x72, 0x6b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x10, 0x02, 0x22, 0x20, 0x0a, 0x06, 0x42,
	0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0xcd, 0x08,
	0x0a, 0x0a, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x2e, 0x42, 0x6c, 0x61,
	0x6e, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x31, 0x0a, 0x05,
	0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xb4, 0x02, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x64, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x22, 0x3b, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x78, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x74,
	0x6d, 0x6c, 0x35, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x10, 0x03, 0x22, 0x28, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x32, 0x85, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6e, 0x61, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_commonform_proto_rawDescOnce sync.Once
	file_commonform_proto_rawDescData = file_commonform_proto_rawDesc
)

func file_commonform_proto_rawDescGZIP() []byte {
	file_commonform_proto_rawDescOnce.Do(func() {
		file_commonform_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonform_proto_rawDescData)
	})
	return file_commonform_proto_rawDescData
}

var file_commonform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_commonform_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_commonform_proto_goTypes = []interface{}{
	(Document_DocumentMeta_InputFormat)(0), // 0: commonform.Document.DocumentMeta.InputFormat
	(ToAssemble_OutputFormat)(0),           // 1: commonform.ToAssemble.OutputFormat
	(ToAssemble_NumberFormat)(0),           // 2: commonform.ToAssemble.NumberFormat
	(*Document)(nil),                       // 3: commonform.Document
	(*Blanks)(nil),                         // 4: commonform.Blanks
	(*ToAssemble)(nil),                     // 5: commonform.ToAssemble
	(*Document_DocumentMeta)(nil),          // 6: commonform.Document.DocumentMeta
	(*ToAssemble_Blank)(nil),               // 7: commonform.ToAssemble.Blank
	(*ToAssemble_Signature)(nil),           // 8: commonform.ToAssemble.Signature
	(*ToAssemble_Signature_Entity)(nil),    // 9: commonform.ToAssemble.Signature.Entity
}
var file_commonform_proto_depIdxs = []int32{
	6,  // 0: commonform.Document.meta:type_name -> commonform.Document.DocumentMeta
	3,  // 1: commonform.ToAssemble.document:type_name -> commonform.Document
	7,  // 2: commonform.ToAssemble.blanks:type_name -> commonform.ToAssemble.Blank
	8,  // 3: commonform.ToAssemble.signatures:type_name -> commonform.ToAssemble.Signature
	1,  // 4: commonform.ToAssemble.format:type_name -> commonform.ToAssemble.OutputFormat
	2,  // 5: commonform.ToAssemble.numbering:type_name -> commonform.ToAssemble.NumberFormat
	0,  // 6: commonform.Document.DocumentMeta.format:type_name -> commonform.Document.DocumentMeta.InputFormat
	9,  // 7: commonform.ToAssemble.Signature.entities:type_name -> commonform.ToAssemble.Signature.Entity
	3,  // 8: commonform.CommonFormEngine.Extract:input_type -> commonform.Document
	5,  // 9: commonform.CommonFormEngine.Assemble:input_type -> commonform.ToAssemble
	4,  // 10: commonform.CommonFormEngine.Extract:output_type -> commonform.Blanks
	3,  // 11: commonform.CommonFormEngine.Assemble:output_type -> commonform.Document
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_commonform_proto_init() }
func file_commonform_proto_init() {
	if File_commonform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commonform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAssemble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document_DocumentMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAssemble_Blank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAssemble_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAssemble_Signature_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonform_proto_goTypes,
		DependencyIndexes: file_commonform_proto_depIdxs,
		EnumInfos:         file_commonform_proto_enumTypes,
		MessageInfos:      file_commonform_proto_msgTypes,
	}.Build()
	File_commonform_proto = out.File
	file_commonform_proto_rawDesc = nil
	file_commonform_proto_goTypes = nil
	file_commonform_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommonFormEngineClient is the client API for CommonFormEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonFormEngineClient interface {
	// Extracts the paramters.
	Extract(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Blanks, error)
	// Assembles the document.
	Assemble(ctx context.Context, in *ToAssemble, opts ...grpc.CallOption) (*Document, error)
}

type commonFormEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonFormEngineClient(cc grpc.ClientConnInterface) CommonFormEngineClient {
	return &commonFormEngineClient{cc}
}

func (c *commonFormEngineClient) Extract(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Blanks, error) {
	out := new(Blanks)
	err := c.cc.Invoke(ctx, "/commonform.CommonFormEngine/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonFormEngineClient) Assemble(ctx context.Context, in *ToAssemble, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/commonform.CommonFormEngine/Assemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonFormEngineServer is the server API for CommonFormEngine service.
type CommonFormEngineServer interface {
	// Extracts the paramters.
	Extract(context.Context, *Document) (*Blanks, error)
	// Assembles the document.
	Assemble(context.Context, *ToAssemble) (*Document, error)
}

// UnimplementedCommonFormEngineServer can be embedded to have forward compatible implementations.
type UnimplementedCommonFormEngineServer struct {
}

func (*UnimplementedCommonFormEngineServer) Extract(context.Context, *Document) (*Blanks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (*UnimplementedCommonFormEngineServer) Assemble(context.Context, *ToAssemble) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assemble not implemented")
}

func RegisterCommonFormEngineServer(s *grpc.Server, srv CommonFormEngineServer) {
	s.RegisterService(&_CommonFormEngine_serviceDesc, srv)
}

func _CommonFormEngine_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonFormEngineServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonform.CommonFormEngine/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonFormEngineServer).Extract(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonFormEngine_Assemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToAssemble)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonFormEngineServer).Assemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonform.CommonFormEngine/Assemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonFormEngineServer).Assemble(ctx, req.(*ToAssemble))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonFormEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commonform.CommonFormEngine",
	HandlerType: (*CommonFormEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _CommonFormEngine_Extract_Handler,
		},
		{
			MethodName: "Assemble",
			Handler:    _CommonFormEngine_Assemble_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commonform.proto",
}
